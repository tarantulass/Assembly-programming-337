ORG 0H
LJMP MAIN
ORG 100H
MAIN:
CALL TAKE_INP
CALL LED_DISP
HERE: SJMP HERE
ORG 130H

DELAY_8:
PUSH 00H
MOV R0,#195
HERE0: ACALL DELAY_2
DJNZ R0,HERE0
POP 00H

RET

DELAY_2:
MOV R3,#200
PUSH 00H
LOOP:
MOV R1,#200
HERE1: DJNZ R1,HERE1
DJNZ R3,LOOP
POP 00H
RET

DELAY_4:
PUSH 00H
MOV R0,#100
HERE3: ACALL DELAY2
DJNZ R0,HERE3
POP 00H

RET

DELAY2:
MOV R3,#200
PUSH 00H
LOOP0:
MOV R1,#200
HERE4: DJNZ R1,HERE4
DJNZ R3,LOOP0
POP 00H
RET


TAKE_INP:
MOV P1,#0FH //SET THE PORT TO READ INPUT
MOV A,P1
MOV B,#16
MUL AB
SETB P1.4//1
CALL DELAY_8
MOV P1,#0FH
MOV B,P1
ADD A,B
MOV 60H,A
SETB P1.5//2
CALL DELAY_8

MOV P1,#0FH //SET THE PORT TO READ INPUT
MOV A,P1
MOV B,#16
MUL AB
SETB P1.4
SETB P1.5
CALL DELAY_8
MOV P1,#0FH
MOV B,P1
ADD A,B
MOV 61H,A
SETB P1.6
CALL DELAY_8

MOV P1,#0FH //SET THE PORT TO READ INPUT
MOV A,P1
MOV B,#16
MUL AB
SETB P1.4
SETB P1.6
CALL DELAY_8
MOV P1,#0FH
MOV B,P1
ADD A,B
MOV 62H,A
SETB P1.6
SETB P1.5
CALL DELAY_8

MOV P1,#0FH //SET THE PORT TO READ INPUT
MOV A,P1
MOV B,#16
MUL AB
SETB P1.4
SETB P1.5
SETB P1.6
CALL DELAY_8
MOV P1,#0FH
MOV B,P1
ADD A,B
MOV 63H,A
SETB P1.7
CALL DELAY_8
RET

QUANT_ENC:
MOV P1,#0FH
MOV R2,#00H
MOV 64H,#05

MOV A,#64
SUBB A,@ R1
JNC ENC
CLR A

MOV R2,#01
MOV A,#128
SUBB A,@ R1
JNC ENC//SAMPLE <128

CLR A

MOV R2,#03
MOV A,#192
SUBB A,@ R1
JNC ENC//SAMPLE <192 

CLR A

MOV R2,#07
MOV A,#192
SUBB A,@ R1
JC ENC//SAMPLE >192


ENC:
INC R2
RET

LED_DISP:

LOOP1:

MOV R1,#60H
CALL QUANT_ENC
MOV A,R2
MOV B,#16
MUL AB
MOV P1,A
MOV 66H,2
CALL DELAY_4

MOV R1,#61H
CALL QUANT_ENC
MOV A,R2
MOV B,#16
MUL AB
MOV P1,A
MOV 67H,2
CALL DELAY_4

MOV R1,#62H
CALL QUANT_ENC
MOV A,R2
MOV B,#16
MUL AB
MOV P1,A
MOV 68H,2
CALL DELAY_4

MOV R1,#63H
CALL QUANT_ENC
MOV A,R2
MOV B,#16
MUL AB
MOV P1,A
MOV 69H,2
CALL DELAY_4

LJMP Loop1


RET
END
